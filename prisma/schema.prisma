datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // workspace         WorkSpace[]
  authoredWorkspace WorkSpace[] @relation("WorkspaceAuthor")

  createdTasks     Task[]     @relation("TaskAuthor")
  assignedTasks    Task[]     @relation("TaskAssignee")
  authoredComment  Comments[] @relation("CommentAuthor")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model WorkSpace {
  id   Int    @id @default(autoincrement())
  wsId String @unique @default(cuid())
  name String

  author   User   @relation("WorkspaceAuthor", fields: [authorId], references: [id])
  authorId String

  CreatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startdate   DateTime?
  target      DateTime?
  status      Status    @default(PLANNED)
  priority    Priority  @default(NONE)

  author   User   @relation("TaskAuthor", fields: [authorId], references: [id])
  authorId String

  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId String?

  comments Comments[]

  projectId Int?

  CreatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id Int @id @default(autoincrement())

  body String
  // filetype String?
  // fileUrl  String?

  issue   Task @relation(fields: [issueId], references: [id])
  issueId Int

  author   User   @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
}

enum Priority {
  LOW
  HIGH
  MEDIUM
  NONE
}

enum Status {
  DONE
  IN_PROGRESS
  PLANNED
  COMPLETED
  BACKLOG
  CANCELED
}
